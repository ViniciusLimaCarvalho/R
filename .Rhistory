print("jovem")
print("hello world")
print hello
print(hello)
hello = 3
print(hello world)
print(hello)
x = "hello world"
print(X)
print(x)
x=1
y=3
x = x + y
print(x)
y = x**y
print(y)
library(boot)
library(boot)
detach("package:boot", unload = TRUE)
library(boot, lib.loc = "C:/Program Files/R/R-4.4.0/library")
detach("package:boot", unload = TRUE)
1 + 1
3 ^ 6 #outra potenciação
1 + 2 #adição
1 - 6 #subtração
3 * 4 #multiplicação
4 / 9 #divisão
3 ** 6 #potenciação
3 ^ 6 #outra potenciação
a <- 123 * 98
print(a)
12 + 1245 -> b
print(a+b)
class(a)
class(w)
w <- "furiosa"
class(w)
y <- TRUE
class(y)
a + b
a + w
a + y
a + w
y <- FALSE
a + w
a + y
y <- TRUE
x <- c(23,10,45)
x
x + c(TRUE,FALSE)
c(x,45)
c(x,45) + c(TRUE,FALSE)
d <- c(x,45)
d + c(TRUE,FALSE)
x[2]
x[c(2,3)]
x[c(2,3, 4)]
x[c(2,3,3)]
x < 30
d > 49
d >= 49
d >= 23
sum(x < 30)
x[x < 30]
which(x < 30)
which(x >= 23)
which(d >= 23)
c(12, 34, "vasco")
v <- c(12, 34, "vasco")
23:1024
23:1025
2:1025
1:1025
1190:1025
21301230123:1025
1025:1025
1026:1025
p[8]
p <- 1026:1025
p[8]
p <- 1026:121025
p[8]
?sample
dado1<- sample (x=1:6, size = 10000, replace = TRUE)
dado1
sum(dado1 = 3)
sum(sample = 3)
sum(x = 3)
sum(x == 3)
sum(dado1 == 3)
sum(dado1 == 3)/10000
1/6
mean(dado1 == 3)
dado1<- sample (x=1:6, size = 10000, replace = TRUE)
sum(dado1 == 3)/10000
mean(dado1 == 3)
?sample
soma <- dado1 + dado2
dado2 <- sample (x = 1:6, size = 10000, replace = TRUE)
soma <- dado1 + dado2
soma <- dado1 + dado2
soma[1:10]
mean(soma == 3)
1/16
dado3 <- sample (x = 1:6, size = 10, replace = TRUE)
mean(dado3 == 3)
dado3 <- sample (x = 1:6, size = 10, replace = TRUE)
mean(dado3 == 3)
dado3 <- sample (x = 1:6, size = 10, replace = TRUE)
mean(dado3 == 3)
dado3 <- sample (x = 1:6, size = 10, replace = TRUE)
mean(dado3 == 3)
dado3 <- sample (x = 1:6, size = 10, replace = TRUE)
mean(dado3 == 3)
source("~/.active-rstudio-document", echo=TRUE)
b <- a + 2
c <- c(a,b)
jovem <- 3
jovem <- 3,09
jovem <- 3.09
print("jovem")
print(jovem)
jovem <- "jovem"
print(jovem)
jovem <- "jovem"
jovem = jovem
print(jovem)
set.seed(1)
runif(1)
set.seed(112)
runif(112)
set.seed(112)
runif(1)
set.seed(112)
runif(10)
ipconfig
set.seed(112)
runif(10000000)
x <- c(23,10,45)
x
d <- c(x,45)
d + c(TRUE,FALSE)
x[c(2,3,3)]
sum(x < 30)
x[x < 30]
which(x < 30)
dado1<- sample (x=1:6, size = 10000, replace = TRUE)
dado1
dado1<- sample (x=1:6, size = 100, replace = TRUE)
dado1
sum(dado1 == 3)
mean(dado1 == 3)
dado1<- sample (x=1:6, size = 102, replace = TRUE)
dado1
sum(dado1 == 3)
mean(dado1 == 3)
v <- c(12, 34, "vasco")
p <- 1026:121025
p[8]
for(h in 1:10000){
semanas <- 0
acertos <- 0
while(acertos < 4){
sorteio <- sample(x = 1:60, size = 6, replace=FALSE)
acertos <- sum(bilhete %in% sorteio)
semanas <- semanas + 1
}
tempoGasto[h] <- (semanas*7)/365
}
#Mega-Sena
bilhete <- c(1,2,3,4,5,6)
tempoGasto <- c()
h <- 0
for(h in 1:10000){
semanas <- 0
acertos <- 0
while(acertos < 4){
sorteio <- sample(x = 1:60, size = 6, replace=FALSE)
acertos <- sum(bilhete %in% sorteio)
semanas <- semanas + 1
}
tempoGasto[h] <- (semanas*7)/365
}
bilhete <- c(1,2,3,4,5,6)
tempoGasto <- c()
h <- 0
for(h in 1:10000){
semanas <- 0
acertos <- 0
while(acertos < 4){
sorteio <- sample(x = 1:60, size = 6, replace=FALSE)
acertos <- sum(bilhete %in% sorteio)
semanas <- semanas + 1
}
tempoGasto[h] <- (semanas*7)/365
}
mean(tempoGasto)
calcula_probabilidade <- function(n){
resultados<-c()
i <- 0
for(i in 1:10000){
aniversarios <- sample(x = 1:365, size = n, replace = TRUE)
resultados[i] <- any(duplicated(aniversarios))
}
print(mean(resultados))
}
calcula_probabilidade(n=100)
calcula_probabilidade(n=50)
calcula_probabilidade(n=50)
calcula_probabilidade(n=40)
calcula_probabilidade(n=30)
calcula_probabilidade(n=20)
calcula_probabilidade(n=10)
library(ggplot2)
library(palmerpenguins)
tabela <- penguins[1:n,]
tabela <- penguins[1:n,]
n <- round(0.8*nrow(penguins))
tabela <- penguins[1:n,]
ggplot(data = tabela, aes(x = island))+
theme_minimal()
View(tabela)
ggplot(data = treinamento, aes(x = Petal.Length, y = Petal.Width, col = Species))+
geom_point(size = 2, alpha = 0.5)+
theme_minimal()
iris <- iris[sample(nrow(iris)),]
n <- round(0.8*nrow(iris))
n
treinamento <- iris[1:n,]
teste <- iris[-(1:n),]
ggplot(data = treinamento, aes(x = Petal.Length, y = Petal.Width, col = Species))+
geom_point(size = 2, alpha = 0.5)+
theme_minimal()
ggplot(data = tabela, aes(x = species, y = year, col = island))+
theme_minimal()
n <- round(0.8*nrow(penguins))
tabela <- penguins[1:n,]
ggplot(data = tabela, aes(x = species, y = year, col = island))+
theme_minimal()
ggplot(data = tabela, aes(x = species, y = year, col = island))+
geom_point(size = 2, alpha = 0.5)+
theme_minimal()
help rep()
help rep
help("replications")
help(rep)
vet <- rep((2,4,6,8), 10)
vet <- (2,4,6,8)
vet <- (2;4;6;8)
vet <- [2,4,6,8]
vet <- c(2,4,6,8)
vet10 <- rep(vet,10)
vet10
help(seq)
# Criando uma sequência completa com 11 ciclos
ciclo_completo <- rep(c(2, 4, 6, 8), length.out = 41)
# Ajustando o número de ocorrências
sequencia <- c(ciclo_completo[seq(1, 41, by = 4)], ciclo_completo[-seq(1, 41, by = 4)])
# Exibindo a sequência final
sequencia
vet <- seq(2, 8, by = 2)
vet10 <- rep(vet,10)
vet10
help(rep)
vet11 <- rep(vet, length.out = 41)
vet11
help(pow)
help(power)
help(*)
soma1 <- 0
for (n in 20:30){
soma1 <- soma1 + ((n**2) + (4*n))
}
soma1
soma2 <- 0
soma2 <- 0
for (n in 10:20){
soma2 <- soma2 + (((3**n) / n) + ((2**n) / (n**2)))
}
soma2
soma1
soma2 <- 0
soma1
soma1 <- soma1 + ((n**2) + (4*n))
for (n in 20:30){
soma1 <- soma1 + ((n**2) + (4*n))
}
soma1
setwd("C:/Users/vinic/OneDrive/Documentos/Estatística Computacional/R")
library(ggplot2)
library(palmerpenguins)
library(class)
data(penguins)
pinguins <- penguins
str(pinguins)
pinguins <- pinguins[,-c(2,7,8)]
n <- na.omit(pinguins)
n <- round(0.8*nrow(pinguins))
indices_treino <- sample(1:nrow(pinguins), size = n, replace = FALSE)
treino <- pinguins[indices_treino,]
teste <- pinguins[-indices_treino,]
treino_padronizado <- scale(treino[,-1])
teste_padronizado <- scale(teste[,-1])
classe_treino <- treino$species
classe_teste <- teste$species
modelo1 <- knn(train = treino_padronizado, test = teste_padronizado, cl = classe_treino, k=1)
